# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Tech Stack Understanding

- This is a Gatsby React app with Firebase backend
- Uses Ant Design for UI components
- Admin panel is organized with Menu items that map to page keys
- Thaali sizes: Grand, Full, Half, Quarter
- Families have: familyid, displayname, fmb.enrolled, fmb.thaaliSize (default max), fmb.code
- Menus have: items array, status (active/queued/archived), month, year
- Only one menu can be "active" at a time (accepting submissions)
- Menu documents have a 'submissions' array that stores family IDs (not display names) of families who have submitted selections

# Scratchpad

## Current Task: Fix Delete Submission Bug in View Submissions Tab

### Task Description:

Fix the delete functionality in the View Submissions tab where deleting a submission doesn't properly remove the family ID from the menu's submissions array, causing display issues.

### Issue:

When an admin deletes a submission entry:
1. The submission document is deleted correctly
2. BUT the family ID is not removed from the menu's submissions array
3. This creates a bug where the entry appears deleted but still shows up because the submissions array is used to determine which submissions to display

### Root Cause:

1. In `view-submissions.js`, the delete function was trying to remove `submission.familyDisplayName` from the submissions array
2. The submissions array actually contains family IDs, not display names
3. Additionally, the `make-selections.js` component was incorrectly adding display names instead of family IDs to the array

### Fix Applied:

[X] Fixed `view-submissions.js` line 306: Changed from `submission.familyDisplayName` to `submission.familyid`
[X] Fixed `make-selections.js` line 305: Changed from `selectedFamily.displayname` to `selectedFamily.familyid`

### Result:

Both the delete functionality and the submission creation now properly handle family IDs in the menu's submissions array, ensuring consistency across the application.
